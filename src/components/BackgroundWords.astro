---
import { words } from '../data/words';

const isMobile = typeof window !== 'undefined' && /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);

// Initialize mouse position at the center of the screen
const initialMouseX = typeof window !== 'undefined' ? window.innerWidth / 2 : 0;
const initialMouseY = typeof window !== 'undefined' ? window.innerHeight / 2 : 0;
---

<div class="background-words">
  {words.map((word, index) => (
    <span
      class="word"
      style={`
        --x: ${Math.random() * 100}%;
        --y: ${Math.random() * 100}%;
        --delay: ${index * 0.1}s;
        --opacity: ${isMobile ? 0.4 : 0.3};
      `}
    >
      {word}
    </span>
  ))}
</div>

<style>
  .background-words {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    pointer-events: none;
    z-index: -1;
    overflow: hidden;
  }

  .word {
    position: absolute;
    font-size: 1.5rem;
    color: var(--color-text);
    opacity: var(--opacity);
    transition: transform 0.3s ease-out, opacity 0.3s ease-out;
    transform: translate(calc(var(--x) - 50%), calc(var(--y) - 50%));
    animation: float 3s ease-in-out infinite;
    animation-delay: var(--delay);
  }

  @media (max-width: 768px) {
    .word {
      font-size: 1.2rem;
      opacity: 0.4;
    }
  }

  @keyframes float {
    0%, 100% {
      transform: translate(calc(var(--x) - 50%), calc(var(--y) - 50%));
    }
    50% {
      transform: translate(calc(var(--x) - 50%), calc(var(--y) - 60%));
    }
  }
</style>

<script>
  if (!isMobile) {
    const words = document.querySelectorAll('.word');
    let mouseX = initialMouseX;
    let mouseY = initialMouseY;

    // Function to update word positions
    const updateWordPositions = () => {
      words.forEach(word => {
        const rect = word.getBoundingClientRect();
        const wordX = rect.left + rect.width / 2;
        const wordY = rect.top + rect.height / 2;

        const dx = mouseX - wordX;
        const dy = mouseY - wordY;
        const distance = Math.sqrt(dx * dx + dy * dy);

        const maxDistance = 300;
        const scale = Math.max(0, 1 - distance / maxDistance);

        word.style.transform = `translate(calc(var(--x) - 50%), calc(var(--y) - 50%)) scale(${1 + scale * 0.2})`;
        word.style.opacity = (0.3 + scale * 0.4).toString();
      });
    };

    // Update positions immediately on load
    updateWordPositions();

    // Update positions on mouse move
    document.addEventListener('mousemove', (e) => {
      mouseX = e.clientX;
      mouseY = e.clientY;
      updateWordPositions();
    });
  }
</script>
