---
export interface Props {
  title: string;
}

import "@fontsource/overpass"
import BackgroundWords from './BackgroundWords.astro'

const { title } = Astro.props as Props;
---

<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width" />
    <link rel="icon" type="image/x-icon" href="/favicon.ico" />
    <title>{title}</title>
    <meta
      name="description"
      content="Romain Capelle"
    />
  </head>
  <body>
    <BackgroundWords />
    <slot />
  </body>
</html>

<style>
  body { font-family: "Overpass", sans-serif; }

  html,
  body {
    width: 100%;
    height: 100%;
    text-align: center;
  }

  :root {
    --font-size-base: clamp(1rem, 0.34vw + 0.91rem, 1.19rem);
    --font-size-lg: clamp(1.2rem, 1.2rem, 1.5rem);
    --font-size-xl: clamp(1.3rem, 2.5rem, 3.75rem);

    --color-black: hsl(0, 0%, 0%);
    --color-white: #EFEDE3F4;
    --color-text: #3e3e3e;
    --color-blue: #0072b1;
    --color-blue-hover: #005582;
    --color-red: hsl(2, 97%, 53%);
    --color-yellow: hsl(47, 100%, 50%);
  }

  [data-theme="dark"] {
    --color-white: #1a1a1a;
    --color-text: #ffffff;
    --color-blue: #0072b1;
    --color-blue-hover: #0095e0;
  }

  body::-webkit-scrollbar {
    width: 0.6em;
  }

  body::-webkit-scrollbar-track {
    box-shadow: inset 0 0 6px var(--color-blue);
  }

  body::-webkit-scrollbar-thumb {
    background-color: var(--color-white);
  }

  html {
    font-family: 'Overpass', serif;
    font-size: var(--font-size-base);
    color: var(--color-text);
    background-color: var(--color-white);
    transition: background-color 0.3s ease, color 0.3s ease;
  }

  body {
    margin: 0;
  }

  :global(h1) {
    font-size: var(--font-size-xl);
    font-weight: 400;
    line-height: 1.38;
  }

  :global(h2) {
    font-size: var(--font-size-lg);
  }

  :global(a) {
    color: var(--color-blue);
    text-decoration: none;
    transition: color 0.3s ease;
  }

  :global(a:hover) {
    color: var(--color-blue-hover);
  }
</style>

<script>
  // Function to toggle dark mode
  function toggleDarkMode() {
    const html = document.documentElement;
    const currentTheme = html.getAttribute('data-theme');
    const newTheme = currentTheme === 'dark' ? 'light' : 'dark';
    html.setAttribute('data-theme', newTheme);
    localStorage.setItem('theme', newTheme);
  }

  // Initialize theme from localStorage or system preference
  function initializeTheme() {
    const savedTheme = localStorage.getItem('theme');
    const systemPrefersDark = window.matchMedia('(prefers-color-scheme: dark)').matches;
    const initialTheme = savedTheme || (systemPrefersDark ? 'dark' : 'light');
    document.documentElement.setAttribute('data-theme', initialTheme);
  }

  // Add click handler to body, excluding LinkedIn link
  document.addEventListener('DOMContentLoaded', () => {
    initializeTheme();

    document.body.addEventListener('click', (e) => {
      // Check if the click was on the LinkedIn link or its children
      if (!e.target.closest('a[href*="linkedin.com"]')) {
        toggleDarkMode();
      }
    });
  });
</script>
